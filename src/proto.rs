#![allow(non_camel_case_types)]
#![allow(dead_code)]

/* automatically generated by rust-bindgen */

pub const PROTOCOL_BINARY_REQ: u8 = 128;
pub const PROTOCOL_BINARY_RES: u8 = 129;
pub type protocol_binary_magic = u8;

pub const PROTOCOL_BINARY_RESPONSE_SUCCESS: u8 = 0;
pub const PROTOCOL_BINARY_RESPONSE_KEY_ENOENT: u8 = 1;
pub const PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS: u8 = 2;
pub const PROTOCOL_BINARY_RESPONSE_E2BIG: u8 = 3;
pub const PROTOCOL_BINARY_RESPONSE_EINVAL: u8 = 4;
pub const PROTOCOL_BINARY_RESPONSE_NOT_STORED: u8 = 5;
pub const PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL: u8 = 6;
pub const PROTOCOL_BINARY_RESPONSE_AUTH_ERROR: u8 = 32;
pub const PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE: u8 = 33;
pub const PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND: u8 = 129;
pub const PROTOCOL_BINARY_RESPONSE_ENOMEM: u8 = 130;
pub type protocol_binary_response_status = u8;

pub const PROTOCOL_BINARY_CMD_GET: u8 = 0;
pub const PROTOCOL_BINARY_CMD_SET: u8 = 1;
pub const PROTOCOL_BINARY_CMD_ADD: u8 = 2;
pub const PROTOCOL_BINARY_CMD_REPLACE: u8 = 3;
pub const PROTOCOL_BINARY_CMD_DELETE: u8 = 4;
pub const PROTOCOL_BINARY_CMD_INCREMENT: u8 = 5;
pub const PROTOCOL_BINARY_CMD_DECREMENT: u8 = 6;
pub const PROTOCOL_BINARY_CMD_QUIT: u8 = 7;
pub const PROTOCOL_BINARY_CMD_FLUSH: u8 = 8;
pub const PROTOCOL_BINARY_CMD_GETQ: u8 = 9;
pub const PROTOCOL_BINARY_CMD_NOOP: u8 = 10;
pub const PROTOCOL_BINARY_CMD_VERSION: u8 = 11;
pub const PROTOCOL_BINARY_CMD_GETK: u8 = 12;
pub const PROTOCOL_BINARY_CMD_GETKQ: u8 = 13;
pub const PROTOCOL_BINARY_CMD_APPEND: u8 = 14;
pub const PROTOCOL_BINARY_CMD_PREPEND: u8 = 15;
pub const PROTOCOL_BINARY_CMD_STAT: u8 = 16;
pub const PROTOCOL_BINARY_CMD_SETQ: u8 = 17;
pub const PROTOCOL_BINARY_CMD_ADDQ: u8 = 18;
pub const PROTOCOL_BINARY_CMD_REPLACEQ: u8 = 19;
pub const PROTOCOL_BINARY_CMD_DELETEQ: u8 = 20;
pub const PROTOCOL_BINARY_CMD_INCREMENTQ: u8 = 21;
pub const PROTOCOL_BINARY_CMD_DECREMENTQ: u8 = 22;
pub const PROTOCOL_BINARY_CMD_QUITQ: u8 = 23;
pub const PROTOCOL_BINARY_CMD_FLUSHQ: u8 = 24;
pub const PROTOCOL_BINARY_CMD_APPENDQ: u8 = 25;
pub const PROTOCOL_BINARY_CMD_PREPENDQ: u8 = 26;
pub const PROTOCOL_BINARY_CMD_TOUCH: u8 = 28;
pub const PROTOCOL_BINARY_CMD_GAT: u8 = 29;
pub const PROTOCOL_BINARY_CMD_GATQ: u8 = 30;
pub const PROTOCOL_BINARY_CMD_GATK: u8 = 35;
pub const PROTOCOL_BINARY_CMD_GATKQ: u8 = 36;
pub const PROTOCOL_BINARY_CMD_SASL_LIST_MECHS: u8 = 32;
pub const PROTOCOL_BINARY_CMD_SASL_AUTH: u8 = 33;
pub const PROTOCOL_BINARY_CMD_SASL_STEP: u8 = 34;
pub const PROTOCOL_BINARY_CMD_RGET: u8 = 48;
pub const PROTOCOL_BINARY_CMD_RSET: u8 = 49;
pub const PROTOCOL_BINARY_CMD_RSETQ: u8 = 50;
pub const PROTOCOL_BINARY_CMD_RAPPEND: u8 = 51;
pub const PROTOCOL_BINARY_CMD_RAPPENDQ: u8 = 52;
pub const PROTOCOL_BINARY_CMD_RPREPEND: u8 = 53;
pub const PROTOCOL_BINARY_CMD_RPREPENDQ: u8 = 54;
pub const PROTOCOL_BINARY_CMD_RDELETE: u8 = 55;
pub const PROTOCOL_BINARY_CMD_RDELETEQ: u8 = 56;
pub const PROTOCOL_BINARY_CMD_RINCR: u8 = 57;
pub const PROTOCOL_BINARY_CMD_RINCRQ: u8 = 58;
pub const PROTOCOL_BINARY_CMD_RDECR: u8 = 59;
pub const PROTOCOL_BINARY_CMD_RDECRQ: u8 = 60;
pub type protocol_binary_command = u8;

pub const PROTOCOL_BINARY_RAW_BYTES: u8 = 0;
pub type protocol_binary_datatypes = u8;

#[repr(C)]
pub struct Struct_Unnamed6 {
    pub magic: u8,
    pub opcode: u8,
    pub keylen: u16,
    pub extlen: u8,
    pub datatype: u8,
    pub reserved: u16,
    pub bodylen: u32,
    pub opaque: u32,
    pub cas: u64,
}
pub type protocol_binary_request_header =Struct_Unnamed6; 

impl Struct_Unnamed6 {
    pub fn as_bytes(&self) -> &[u8,..24] {
        unsafe { ::std::mem::transmute(self) } 
    }
}

#[repr(C)]
pub struct Struct_Unnamed8 {
    pub magic: u8,
    pub opcode: u8,
    pub keylen: u16,
    pub extlen: u8,
    pub datatype: u8,
    pub status: u16,
    pub bodylen: u32,
    pub opaque: u32,
    pub cas: u64,
}
pub type protocol_binary_response_header = Struct_Unnamed8;
pub type protocol_binary_request_no_extras = protocol_binary_request_header;
pub type protocol_binary_response_no_extras = protocol_binary_response_header;
pub type protocol_binary_request_get = protocol_binary_request_no_extras;
pub type protocol_binary_request_getq = protocol_binary_request_no_extras;
pub type protocol_binary_request_getk = protocol_binary_request_no_extras;
pub type protocol_binary_request_getkq = protocol_binary_request_no_extras;

#[repr(C)]
pub struct Struct_Unnamed14 {
    pub header: protocol_binary_response_header,
    pub flags: u32
}
pub type protocol_binary_response_get = Struct_Unnamed14;
pub type protocol_binary_response_getq = protocol_binary_response_get;
pub type protocol_binary_response_getk = protocol_binary_response_get;
pub type protocol_binary_response_getkq = protocol_binary_response_get;
pub type protocol_binary_request_delete = protocol_binary_request_no_extras;
pub type protocol_binary_response_delete = protocol_binary_response_no_extras;
#[repr(C)]
pub struct Struct_Unnamed17 {
    pub header: protocol_binary_request_header,
    pub expiration: u32,
}
impl Struct_Unnamed17 {
    pub fn as_bytes(&self) -> &[u8,..28] {
        unsafe { ::std::mem::transmute(self) } 
    }
}

pub type protocol_binary_request_flush = Struct_Unnamed17 ;
pub type protocol_binary_response_flush = protocol_binary_response_no_extras;
#[repr(C)]
pub struct Struct_Unnamed20 {
    pub header: protocol_binary_request_header,
    pub flags: u32,
    pub expiration: u32,
}
impl Struct_Unnamed20 {
    pub fn as_bytes(&self) -> &[u8,..32] {
        unsafe { ::std::mem::transmute(self) } 
    }
}

pub type protocol_binary_request_set =Struct_Unnamed20 ;
pub type protocol_binary_request_add = protocol_binary_request_set;
pub type protocol_binary_request_replace = protocol_binary_request_set;
pub type protocol_binary_response_set = protocol_binary_response_no_extras;
pub type protocol_binary_response_add = protocol_binary_response_no_extras;
pub type protocol_binary_response_replace = protocol_binary_response_no_extras;
pub type protocol_binary_request_noop = protocol_binary_request_no_extras;
pub type protocol_binary_response_noop = protocol_binary_response_no_extras;
#[repr(C)]
pub struct Struct_Unnamed23 {
    pub header: protocol_binary_request_header,
    pub delta: u64,
    pub initial: u64,
    pub expiration: u32,
}
pub type protocol_binary_request_incr = Struct_Unnamed23;
pub type protocol_binary_request_decr = protocol_binary_request_incr;
#[repr(C)]
pub struct Struct_Unnamed26 {
    pub header: protocol_binary_response_header,
    pub value: u64,
}
pub type protocol_binary_response_incr = Struct_Unnamed26;
pub type protocol_binary_response_decr = protocol_binary_response_incr;
pub type protocol_binary_request_quit = protocol_binary_request_no_extras;
pub type protocol_binary_response_quit = protocol_binary_response_no_extras;
pub type protocol_binary_request_append = protocol_binary_request_no_extras;
pub type protocol_binary_request_prepend = protocol_binary_request_no_extras;
pub type protocol_binary_response_append = protocol_binary_response_no_extras;
pub type protocol_binary_response_prepend = protocol_binary_response_no_extras;
pub type protocol_binary_request_version = protocol_binary_request_no_extras;
pub type protocol_binary_response_version = protocol_binary_response_no_extras;
pub type protocol_binary_request_stats = protocol_binary_request_no_extras;
pub type protocol_binary_response_stats = protocol_binary_response_no_extras;
#[repr(C)]
pub struct Struct_Unnamed29 {
    pub header: protocol_binary_request_header,
    pub expiration: u32,
}
pub type protocol_binary_request_touch = Struct_Unnamed29;
pub type protocol_binary_response_touch = protocol_binary_response_no_extras;
#[repr(C)]
pub struct Struct_Unnamed32 {
    pub header: protocol_binary_request_header,
    pub expiration: u32,
}
pub type protocol_binary_request_gat = Struct_Unnamed32;
pub type protocol_binary_request_gatq = protocol_binary_request_gat;
pub type protocol_binary_request_gatk = protocol_binary_request_gat;
pub type protocol_binary_request_gatkq = protocol_binary_request_gat;
pub type protocol_binary_response_gat = protocol_binary_response_get;
pub type protocol_binary_response_gatq = protocol_binary_response_get;
pub type protocol_binary_response_gatk = protocol_binary_response_get;
pub type protocol_binary_response_gatkq = protocol_binary_response_get;
#[repr(C)]
pub struct Struct_Unnamed35 {
    pub header: protocol_binary_response_header,
    pub size: u16,
    pub reserved: u8,
    pub flags: u8,
    pub max_results: u32,
}
pub type protocol_binary_request_rangeop = Struct_Unnamed35;
pub type protocol_binary_request_rget = protocol_binary_request_rangeop;
pub type protocol_binary_request_rset = protocol_binary_request_rangeop;
pub type protocol_binary_request_rsetq = protocol_binary_request_rangeop;
pub type protocol_binary_request_rappend = protocol_binary_request_rangeop;
pub type protocol_binary_request_rappendq = protocol_binary_request_rangeop;
pub type protocol_binary_request_rprepend = protocol_binary_request_rangeop;
pub type protocol_binary_request_rprependq = protocol_binary_request_rangeop;
pub type protocol_binary_request_rdelete = protocol_binary_request_rangeop;
pub type protocol_binary_request_rdeleteq = protocol_binary_request_rangeop;
pub type protocol_binary_request_rincr = protocol_binary_request_rangeop;
pub type protocol_binary_request_rincrq = protocol_binary_request_rangeop;
pub type protocol_binary_request_rdecr = protocol_binary_request_rangeop;
pub type protocol_binary_request_rdecrq = protocol_binary_request_rangeop;

fn req_header() -> protocol_binary_request_header {
    protocol_binary_request_header {
         magic: PROTOCOL_BINARY_REQ ,
         opcode: 0,
         keylen: 0,
         extlen: 0,
         datatype: PROTOCOL_BINARY_RAW_BYTES,
         reserved: 0,
         bodylen: 0,
         opaque: 0,
         cas: 0,
    }
}

pub fn get_req(key:&[u8],opaque:u32) -> protocol_binary_request_get  {
    let mut header = req_header();
    header.opcode=PROTOCOL_BINARY_CMD_GET;
    header.keylen=key.len() as u16;
    header.bodylen=header.keylen as u32;
    header.opaque = opaque;
    header
}

pub fn set_req(key:&[u8],val:&[u8],opaque:u32,flag:u32,expire:u32) -> protocol_binary_request_set {
    let mut header = req_header();
    header.opcode=PROTOCOL_BINARY_CMD_SET;
    header.keylen=key.len() as u16;
    header.extlen=8;
    header.bodylen=header.keylen as u32 + 8 + val.len() as u32;
    header.opaque = opaque;
    protocol_binary_request_set { header:header,flags:flag,expiration:expire } 
}

pub fn del_req(key:&[u8]) -> protocol_binary_request_delete {
    let mut header = get_req(key,0);
    header.opcode=PROTOCOL_BINARY_CMD_DELETE;   
    header
}
